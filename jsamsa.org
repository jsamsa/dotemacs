#+TITLE: Jason Samsa's Emacs Configuration
#+OPTIONS: toc:4 h:4
#+STARTUP: content

* Basic Configuration
** Backups and Autosaves
#+BEGIN_SRC emacs-lisp

  ;; store all backup and autosave files in the tmp dir
  ;; (setq backup-directory-alist
  ;;       `((".*" . ,temporary-file-directory)))
  ;; (setq auto-save-file-name-transforms
  ;;       `((".*" . ,temporary-file-directory)))

  ;; autosave the undo-tree history
  ;; (setq undo-tree-history-directory-alist
  ;;       `((".*" . ,temporary-file-directory)))
  ;; (setq undo-tree-auto-save-history t)
#+END_SRC
** Newline at end of file
#+BEGIN_SRC emacs-lisp

  (setq require-final-newline t)

#+END_SRC
** revert buffers automatically when underlying files are changed externally
#+BEGIN_SRC emacs-lisp
(global-auto-revert-mode t)
#+END_SRC
** Projectile
Globally enable Projectile
#+BEGIN_SRC emacs-lisp
(projectile-mode)
(setq projectile-switch-project-action 'helm-projectile)
#+END_SRC
** Indenting stuff						   :disabled:
#+BEGIN_SRC emacs-lisp
(setq indent-tabs-mode nil)
#+END_SRC
#+BEGIN_SRC emacs-lisp :tangle n
  (setq js-indent-level 2)
  (setq js-indent-level 4)
  (setq c-basic-offset 4)
#+END_SRC
** ~/.emacs.d/init.el

This is how to bootstrap my emacs config using org-mode.
#+BEGIN_SRC emacs-lisp :tangle no

  (package-initialize nil)

  (add-to-list 'package-archives '("org" . "http://orgmode.org/elpa/") t)
  (unless (assoc-default "melpa" package-archives)
    (add-to-list 'package-archives '("melpa" . "http://melpa.org/packages/") t)
    (package-refresh-contents))

  (unless (package-installed-p 'use-package)
    (package-install 'use-package))

  (require 'use-package)

  (use-package org)

  (org-babel-load-file "~/.emacs.d/jsamsa.org")

#+END_SRC

** Personal Information
#+BEGIN_SRC emacs-lisp

  (setq user-full-name "Jason Samsa"
        user-mail-address "")

#+END_SRC   
** ~/elisp/
orgmode-mediawiki provides an org-mode export to media wiki format
#+BEGIN_SRC emacs-lisp
  (when (file-directory-p "~/elisp/orgmode-mediawiki")
    (add-to-list 'load-path "~/elisp/orgmode-mediawiki")
    (require 'ox-mediawiki))
#+END_SRC
** OS X
Make command key meta and option key super
#+BEGIN_SRC emacs-lisp
(setq mac-command-modifier 'meta)
(setq mac-option-modifier 'super)
#+END_SRC

#+BEGIN_SRC emacs-lisp
  (use-package exec-path-from-shell
    :init (progn
            (exec-path-from-shell-initialize))
    )
      
#+END_SRC

** Fonts
#+BEGIN_SRC emacs-lisp
(set-face-attribute 'default nil :height 160)

#+END_SRC
** Bells
#+BEGIN_SRC emacs-lisp
  ;; quiet, please! No dinging!
  (setq visible-bell nil)
  (setq ring-bell-function 'ignore)
#+END_SRC
** Helm
#+BEGIN_SRC emacs-lisp
  (use-package helm
    :ensure helm
    :init
    (progn
      (require 'helm-config)
      (setq helm-candidate-number-limit 100)
      (setq helm-idle-delay 0.0
            helm-quick-update t
            helm-M-x-requires-pattern nil
            helm-ff-skip-boring-files t)
      (helm-mode))
    :bind (("C-c h"	. helm-mini)
           ("C-h a"	. helm-apropos)
           ("C-x C-b"	. helm-buffers-list)
           ("C-x b"	. helm-buffers-list)
           ("M-y"	. helm-show-kill-ring)
           ("M-x"	. helm-M-x)
           ("C-x C-f"	. helm-find-files)
           ("C-x c o"	. helm-occur)
           ("C-x c s"	. helm-swoop)
           ("C-x c SPC" . helm-all-mark-rings)
           ("C-x c r"	. helm-register))
    :config (setq helm-M-x-fuzzy-match t)
    )

  (ido-mode -1)



#+END_SRC
** Change "yes or no" to "y or n"
#+BEGIN_SRC emacs-lisp
(fset 'yes-or-no-p 'y-or-n-p)
#+END_SRC

** Show Column Numbers
#+BEGIN_SRC emacs-lisp
  (column-number-mode)
#+END_SRC
** Backups
#+BEGIN_SRC emacs-lisp
(setq backup-directory-alist '(("." . "~/.emacs.d/backups")))
#+END_SRC

** Windowing
Shhhh....
#+BEGIN_SRC emacs-lisp
(when window-system
  (tooltip-mode -1)
  (tool-bar-mode -1)
  (menu-bar-mode 1)
  (scroll-bar-mode -1))
(setq inhibit-startup-message t)
#+END_SRC

** Frame Size
#+BEGIN_SRC emacs-lisp
   (when window-system (set-frame-size (selected-frame) 120 40))
#+END_SRC
** Encoding
From http://www.wisdomandwonder.com/wordpress/wp-content/uploads/2014/03/C3F.html
#+BEGIN_SRC emacs-lisp
(prefer-coding-system 'utf-8)
(when (display-graphic-p)
  (setq x-select-request-type '(UTF8_STRING COMPOUND_TEXT TEXT STRING)))
#+END_SRC

** Color Theme
#+BEGIN_SRC emacs-lisp

  ;; gruber-darker-theme
  ;; (use-package color-theme :ensure t)
  ;; (use-package gruber-darker-theme :ensure t)
  ;; (load-theme 'tango t)
  ;; (disable-theme 'tango)
  (load-theme 'dracula t)
#+END_SRC

** Main line							   :disabled:
#+BEGIN_SRC emacs-list :tangle no
  (use-package main-line :ensure t)
  (setq main-line-separator-style 'slant-right)
#+END_SRC
** Smart Mode Line
#+BEGIN_SRC emacs-lisp
(use-package smart-mode-line :ensure t)

#+END_SRC
** Registers
#+BEGIN_SRC emacs-lisp
  (set-register ?e '(file . "~/.emacs.d/jsamsa.org"))
  (set-register ?t '(file . "~/org/todo.org"))
#+END_SRC

** Key Bindings
#+BEGIN_SRC emacs-lisp
(global-set-key (kbd "C-x C-m") 'helm-M-x)
#+END_SRC
** Narrowing
Enable narrowing without warning
#+BEGIN_SRC emacs-lisp
(put 'narrow-to-region 'disabled nil)
#+END_SRC
** Speedbar 

#+BEGIN_SRC emacs-lisp
  (global-set-key (kbd "C-c s") 'speedbar)
  (add-hook 'speedbar-after-create-hook
            (lambda ()
              (speedbar-toggle-show-all-files)))

#+END_SRC

* Org mode

My org files are in ~/org
#+BEGIN_SRC emacs-lisp
(setq org-directory "~/org")
#+END_SRC

Would like to use babel for capturing and executing useful commands.

#+BEGIN_SRC emacs-lisp
(require 'ob-sh)
(require 'ob-dot)
#+END_SRC

Syntax highlighting for code blocks

#+BEGIN_SRC emacs-lisp
(setq org-src-fontify-natively t)
#+END_SRC

Default TODO workflow

#+BEGIN_SRC emacs-lisp

(setq org-todo-keywords
      '((sequence "TODO(t/!)" "BLOCKED(b/@)" "|" "DONE" "DELEGATED(@)" "CANCELED(@)")))

#+END_SRC

#+BEGIN_SRC emacs-lisp
  ;; See C-h v org-agenda-custom-commands-local-options 
  (setq org-agenda-custom-commands
        '(("u" "Unscheduled"
           ((todo "" ((org-agenda-overriding-header "Unscheduled")
                      (org-agenda-skip-function '(org-agenda-skip-entry-if 'scheduled))))
            (todo "" ((org-agenda-overriding-header "Scheduled")
                      (org-agenda-skip-function '(org-agenda-skip-entry-if 'notscheduled))))))
          ))
#+END_SRC
** Editing source code
#+BEGIN_SRC emacs-lisp
(setq org-src-window-setup 'current-window)
#+END_SRC
** Babel
#+BEGIN_SRC emacs-lisp
  (org-babel-do-load-languages
   'org-babel-load-languages
   '((emacs-lisp . t)
     (sh . t)
     (http . t)))
#+END_SRC
** Key Bindings
#+BEGIN_SRC emacs-lisp
(global-set-key "\C-cl" 'org-store-link)
(global-set-key "\C-ca" 'org-agenda)
(global-set-key "\C-cc" 'org-capture)
(global-set-key "\C-cb" 'org-iswitchb)

#+END_SRC

** Capture templates

#+BEGIN_SRC emacs-lisp

  (setq org-capture-templates
        '(("t" "Todo" entry (file "~/org/todo.org")
           "* TODO %?\n  %i\n  %a")
          ("m" "Meeting" entry (file+headline "~/org/todo.org" "Meetings")
           "** %?\n    %^T\n")))

#+END_SRC
** GNUPlot
#+BEGIN_SRC emacs-lisp
  (use-package gnuplot
    :ensure t
    :config
    (setq gnuplot-program "/usr/local/bin/gnuplot"))

#+END_SRC
* Programming
** Work around clock table indent bug/feature

This really didn't do what I want, but I may want to build on it if
this doesn't resolve in versions after 8.2.10

#+BEGIN_SRC emacs-lisp
  ;; (defun my-org-clocktable-indent-string (level)
  ;;   (if (= level 1)
  ;;       ""
  ;;     (let ((str "^"))
  ;;       (while (> level 2)
  ;;         (setq level (1- level)
  ;;               str (concat str "--")))
  ;;       (concat str "-> "))))

  ;; (advice-add 'org-clocktable-indent-string :override #'my-org-clocktable-indent-string)
#+END_SRC

** Speed Commands
#+BEGIN_SRC emacs-lisp

(setq org-use-speed-commands t)

#+END_SRC
** Lisp Mode Hook
I want to use these modes for any lisp dialect
#+BEGIN_SRC emacs-lisp
  (defun my-lisp-mode-hook()
    (paredit-mode)
    (rainbow-identifiers-mode)
    (rainbow-delimiters-mode)
    (show-paren-mode))
#+END_SRC

** Emacs Lisp
#+BEGIN_SRC emacs-lisp
(add-hook 'emacs-lisp-mode-hook 'my-lisp-mode-hook)

#+END_SRC

** Clojure
#+BEGIN_SRC emacs-lisp

    (use-package cider 
      :ensure t
      :config (setq cider-lein-command "~/bin/lein")
      :init
      (add-hook 'cider-mode-hook #'eldoc-mode)
      (add-hook 'clojure-mode-hook 'my-lisp-mode-hook)
      (setq nrepl-log-messages t))



    ; using 4clojure for study group
    (use-package 4clojure :ensure t)

#+END_SRC
** Groovy
#+BEGIN_SRC emacs-lisp
  (add-to-list 'auto-mode-alist '("\\.groovy\'" . groovy-mode))
#+END_SRC
** Haskell
#+BEGIN_SRC emacs-lisp
  (use-package haskell-mode
    :ensure t
    :config
    (add-hook 'haskell-mode-hook 'haskell-indent-mode)
    (add-hook 'haskell-mode-hook 'interactive-haskell-mode)
    (setq haskell-process-suggest-remove-import-lines t
          haskell-process-auto-import-loaded-modules t
          haskell-process-log t)
    (define-key haskell-mode-map (kbd "C-c C-l") 'haskell-process-load-or-reload)
    (define-key haskell-mode-map (kbd "C-`") 'haskell-interactive-bring)
    (define-key haskell-mode-map (kbd "C-c C-t") 'haskell-process-do-type)
    (define-key haskell-mode-map (kbd "C-c C-i") 'haskell-process-do-info)
    (define-key haskell-mode-map (kbd "C-c C-c") 'haskell-process-cabal-build)
    (define-key haskell-mode-map (kbd "C-c C-k") 'haskell-interactive-mode-clear)
    (define-key haskell-mode-map (kbd "C-c c") 'haskell-process-cabal)
    (define-key haskell-mode-map (kbd "SPC") 'haskell-mode-contextual-space)
    )
#+END_SRC
** Javascript

#+BEGIN_SRC emacs-lisp
  (add-to-list 'auto-mode-alist '("\\.js$" . js3-mode))
  (add-hook 'js3-mode-hook (lambda () (tern-mode t)))
  (setq js-indent-level 4)
#+END_SRC

** Python
** Elisp
#+BEGIN_SRC emacs-lisp
  (use-package paredit :ensure t)
  (add-hook 'emacs-lisp-mode-hook 'my-lisp-mode-hook)
#+END_SRC
** Magit
#+BEGIN_SRC emacs-lisp
(global-set-key (kbd "C-c g s") 'magit-status)
#+END_SRC
** Web Mode
#+BEGIN_SRC emacs-lisp
  (add-to-list 'auto-mode-alist '("\\.html\\'" . web-mode))

  (defun my-web-mode-hook ()
    (setq web-mode-markup-indent-offset 2))

  (add-hook 'web-mode-hook 'my-web-mode-hook)
#+END_SRC
* Databases
** HSQL
#+BEGIN_SRC emacs-lisp
  (use-package hsql
    :load-path "~/site-lisp/hsql.el/")
#+END_SRC
