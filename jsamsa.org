#+TITLE: Jason Samsa's Emacs Configuration
#+OPTIONS: toc:4 h:4
#+STARTUP: content
* Basic Configuration
** ~/.emacs.d/init.el

This is how to bootstrap my emacs config using org-mode.
#+BEGIN_SRC emacs-lisp :tangle no

  (package-initialize nil)

  (add-to-list 'package-archives '("org" . "http://orgmode.org/elpa/") t)
  (unless (assoc-default "melpa" package-archives)
    (add-to-list 'package-archives '("melpa" . "http://melpa.org/packages/") t)
    (package-refresh-contents))

  (unless (package-installed-p 'use-package)
    (package-install 'use-package))

  (require 'use-package)

  (use-package org)

  (org-babel-load-file "~/.emacs.d/jsamsa.org")

#+END_SRC

** Personal Information
#+BEGIN_SRC emacs-lisp

  (setq user-full-name "Jason Samsa"
        user-mail-address "")

#+END_SRC   
** ~/elisp/
orgmode-mediawiki provides an org-mode export to media wiki format
#+BEGIN_SRC emacs-lisp
  (when (file-directory-p "~/elisp/orgmode-mediawiki")
    (add-to-list 'load-path "~/elisp/orgmode-mediawiki")
    (require 'ox-mediawiki))
#+END_SRC
** OS X
Make command key meta and option key super
#+BEGIN_SRC emacs-lisp
(setq mac-command-modifier 'meta)
(setq mac-option-modifier 'super)
#+END_SRC

** Fonts
#+BEGIN_SRC emacs-lisp
(set-face-attribute 'default nil :height 160)

#+END_SRC
** Helm
#+BEGIN_SRC emacs-lisp
    (use-package helm
      :ensure helm
      :init
      (progn
        (require 'helm-config)
        (setq helm-candidate-number-limit 100)
        (setq helm-idle-delay 0.0
              helm-quick-update t
              helm-M-x-requires-pattern nil
              helm-ff-skip-boring-files t)
        (helm-mode))
      :bind (("C-c h" . helm-mini)
             ("C-h a" . helm-apropos)
             ("C-x C-b" . helm-buffers-list)
             ("C-x b" . helm-buffers-list)
             ("M-y" . helm-show-kill-ring)
             ("M-x" . helm-M-x)
             ("C-x c o" . helm-occur)
             ("C-x c s" . helm-swoop)
             ("C-x c SPC" . helm-all-mark-rings)
             ("C-x c r" . helm-register))
      :config (setq helm-M-x-fuzzy-match t)
      )

    (ido-mode -1)



#+END_SRC
** Change "yes or no" to "y or n"
#+BEGIN_SRC emacs-lisp
(fset 'yes-or-no-p 'y-or-n-p)
#+END_SRC

** Backups
#+BEGIN_SRC emacs-lisp
(setq backup-directory-alist '(("." . "~/.emacs.d/backups")))
#+END_SRC

** Windowing
Shhhh....
#+BEGIN_SRC emacs-lisp
(when window-system
  (tooltip-mode -1)
  (tool-bar-mode -1)
  (menu-bar-mode 1)
  (scroll-bar-mode -1))
(setq inhibit-startup-message t)
#+END_SRC

** Encoding
From http://www.wisdomandwonder.com/wordpress/wp-content/uploads/2014/03/C3F.html
#+BEGIN_SRC emacs-lisp
(prefer-coding-system 'utf-8)
(when (display-graphic-p)
  (setq x-select-request-type '(UTF8_STRING COMPOUND_TEXT TEXT STRING)))
#+END_SRC

** Color Theme
#+BEGIN_SRC emacs-lisp

;; gruber-darker-theme
;; (use-package color-theme :ensure t)
;; (use-package gruber-darker-theme :ensure t)
(load-theme 'tango t)
#+END_SRC

** Main line							   :disabled:
#+BEGIN_SRC emacs-list :tangle no
  (use-package main-line :ensure t)
  (setq main-line-separator-style 'slant-right)
#+END_SRC
** Smart Mode Line
#+BEGIN_SRC emacs-lisp
(use-package smart-mode-line :ensure t)

#+END_SRC
** Registers
#+BEGIN_SRC emacs-lisp
  (set-register ?e '(file . "~/.emacs.d/jsamsa.org"))
  (set-register ?j '(file . "~/org/journal.org"))
  (set-register ?c '(file . "~/org/content-platform.org"))
#+END_SRC

** Key Bindings
#+BEGIN_SRC emacs-lisp
(global-set-key (kbd "C-x C-m") 'helm-M-x)
#+END_SRC
* Org mode
My org files are in ~/org
#+BEGIN_SRC emacs-lisp
(setq org-directory "~/org")
#+END_SRC

Syntax highlighting for code blocks
#+BEGIN_SRC emacs-lisp
(setq org-src-fontify-natively t)
#+END_SRC
** Editing source code
#+BEGIN_SRC emacs-lisp
(setq org-src-window-setup 'current-window)
#+END_SRC

** Key Bindings
#+BEGIN_SRC emacs-lisp
(bind-key "C-c a" 'org-agenda)
#+END_SRC
** GNUPlot
#+BEGIN_SRC emacs-lisp
  (use-package gnuplot
    :ensure t
    :config
    (setq gnuplot-program "/usr/local/bin/gnuplot"))

#+END_SRC
* Programming
** Lisp
#+BEGIN_SRC emacs-lisp
  (defun my-lisp-mode-hook()
    (paredit-mode)
    (rainbow-identifiers-mode)
    (rainbow-delimiters-mode)
    (show-paren-mode))
#+END_SRC
** Clojure
#+BEGIN_SRC emacs-lisp
  (use-package cider 
    :ensure t
    :config (setq cider-lein-command "~/bin/lein")
    :init
    (add-hook 'cider-mode-hook #'eldoc-mode)
    (setq nrepl-log-messages t)
    )

  ; using 4clojure for study group
  (use-package 4clojure :ensure t)

#+END_SRC
** Haskell
#+BEGIN_SRC emacs-lisp
    (use-package haskell-mode
      :ensure t
      :config
      (add-hook 'haskell-mode-hook 'haskell-indent-mode)
      (add-hook 'haskell-mode-hook 'interactive-haskell-mode)
      (setq haskell-process-suggest-remove-import-lines t
            haskell-process-auto-import-loaded-modules t
            haskell-process-log t)
      (define-key haskell-mode-map (kbd "C-c C-l") 'haskell-process-load-or-reload)
      (define-key haskell-mode-map (kbd "C-`") 'haskell-interactive-bring)
      (define-key haskell-mode-map (kbd "C-c C-t") 'haskell-process-do-type)
      (define-key haskell-mode-map (kbd "C-c C-i") 'haskell-process-do-info)
      (define-key haskell-mode-map (kbd "C-c C-c") 'haskell-process-cabal-build)
      (define-key haskell-mode-map (kbd "C-c C-k") 'haskell-interactive-mode-clear)
      (define-key haskell-mode-map (kbd "C-c c") 'haskell-process-cabal)
      (define-key haskell-mode-map (kbd "SPC") 'haskell-mode-contextual-space)
      )
#+END_SRC
** Javascript
** Python
** Elisp
#+BEGIN_SRC emacs-lisp
  (use-package paredit :ensure t)
  (add-hook 'emacs-lisp-mode-hook 'my-lisp-mode-hook)
#+END_SRC
